#
# Usage:
# toCamelCase(<variable|list> <out>)
function(toPascalCase  pc_list_in out)
# message("PascalCase:")
    # print(pc_list_in)
    # print(out)
    list(LENGTH pc_list_in num)
    # print(num)
    if(num EQUAL 1)
        if(DEFINED ${pc_list_in})
            set(pc_list_in ${${pc_list_in}})
        endif()
    endif()
    # print(pc_list_in)
    foreach(str ${pc_list_in})
        string(TOLOWER ${str} str)
        string(SUBSTRING ${str} 0 1 FIRST_LETTER)
        string(SUBSTRING ${str} 1 -1 REST)
        string(TOUPPER ${FIRST_LETTER} FIRST_LETTER)
        set(pc_name ${pc_name}${FIRST_LETTER}${REST})
    endforeach()
    set(${out} ${pc_name} PARENT_SCOPE)
endfunction()
#
# Usage:
# toCamelCase(<list> <out>)
function(toCamelCase cc_list_in cc_out)
    # msg(OK "\nCamelCase:")
    # printVar(cc_list_in)
    # print(cc_out)
    # msg(NOTE "ARGV=${ARGV}")
    # msg(NOTE "ARGN=${ARGN}")
    # msg(NOTE "ARGC=${ARGC}")
    list(POP_BACK ARGV cc_out)
    set(cc_list_in ${ARGV})
    # printVar(cc_list_in)
    # print(cc_out)
    list(LENGTH cc_list_in num)
    # print(num)
    if(num EQUAL 1)
        if(DEFINED ${cc_list_in})
            set(cc_list_in ${${cc_list_in}})
        endif()
    endif()
    # first folder stay lowerCase
    # print(cc_list_in)
    list(GET cc_list_in 0 cc_name)
    # remaining folders will be PascalCased
    list(SUBLIST cc_list_in 1 -1 cc_list_in)
    # print(cc_list_in)
    toPascalCase(cc_list_in ouput)
    string(TOLOWER ${cc_name} cc_name)
    set(${cc_out} ${cc_name}${ouput} PARENT_SCOPE)
endfunction()


#
# Usage:
# pathToCamelCase(<list> <out>)
function(pathToCamelCase pathString out)
# message(" ")
    # list(LENGTH pc_list_in num)
    # # print(num)
    # if(num EQUAL 1)
        if(DEFINED ${pathString})
            set(pathString ${${pathString}})
        endif()
    # endif()
    # convert path to list of folders
    file(TO_CMAKE_PATH ${pathString} pathString)
    # printVar(pathString)
    string(REPLACE "/" ";" pathList "${pathString}")
    # printVar(pathList)
    if("${pathList}" MATCHES "^;.*")
        list(POP_FRONT pathList)
    endif()

    list(FILTER pathList EXCLUDE REGEX "\\.\\.")
    # printList(pathList)
    # file(TO_CMAKE_PATH ${pathString} mylist)
    # print(mylist)
    
    toCamelCase(pathList output)
    set(${out} ${output} PARENT_SCOPE)
endfunction()


# replace home dir by '~'
#
# Usage:
# shortPath(<path|variable> <out> [ALL])
#
# ALL: shortens every folder name to three letters except the last one
#
#      example: /home/<user>/my/nicest/folder
#           ->  ~/my/nic…/folder
#
#      example: /home/<user>/my/nicest/places/to/file.log
#           ->  ~/my/nic…/pla…/to/file.log
function(shortPath path out)
# message(" ")
    cmake_parse_arguments(p "ALL" "" "" ${ARGN})
    # print(path)
    list(LENGTH path num)
    if(num EQUAL 1)
        if(DEFINED ${path})
            set(path ${${path}})
            # print(path)
        endif()
    endif()
    # if starts with windows volume (eg. C:)
    if(path MATCHES "^[a-zA-Z]:")
        # msg(HIGH "windows!")
        file(TO_CMAKE_PATH ${path} path)
        string(REPLACE ";" ":" path "${path}")
        # file(TO_NATIVE_PATH ${path} pathN)
        # print(pathN)
    else()
        file(TO_CMAKE_PATH ${path} path)
    endif()
    # print(path)
    string(REPLACE $ENV{HOME}/ "" _path ${path})
    # print(path)
    # print(_path)
    if(NOT _path STREQUAL path)
        set(prefix ~/)
        msg(NOTE "!")
        # message("################<<<")
    else()
        string(SUBSTRING ${path} 0 1 sub)
        if(sub STREQUAL "/")
            set(prefix "/")
        endif()
    endif()
    # message(".. ${path}")
    if(p_ALL)
        string(REPLACE "/" ";" _path ${_path})
        # print(_path)
        list(POP_BACK _path last)
        # print(last)
        foreach(dir ${_path})
            # print(dir)
            string(LENGTH ${dir} num)
            # print(num)
            if(num GREATER 3)
            string(SUBSTRING ${dir} 0 3 dir)
            list(APPEND newPath ${dir}…)
            else()
            list(APPEND newPath ${dir})
            endif()
            # print(newPath)
            
        endforeach()
        set(_path "${newPath};${last}")
        # message("> ${_path}")
        string(JOIN "/" _path ${_path})
    endif()
    # message("## ${_path}")
    set(_path "${prefix}${_path}")
    # print(_path)
    set(${out} ${_path} PARENT_SCOPE)
endfunction()