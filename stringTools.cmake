
#
# Usage:
# str2Color(<color> <variable> [REVERSE])
# sourrounds a string with escape sequences. Example:
#
# Example:
# set(foo "Wow my text")
# str2Color(Red foo)
# # then foo will be: "\x1b[31mWow my Text\x1b[m"
# - REVERSE: will first put the color reset, then the color
# # then foo will be: "\x1b[mWow my Text\x1b[31m")
#function(str2color s2c_type var)
#    if(NOT WIN32)
#        string(ASCII 27 Esc)
#        set(ColourReset "${Esc}[m")
#        set(ColourBold "${Esc}[1m")
#        set(Red "${Esc}[31m")
#        set(Green "${Esc}[32m")
#        set(Yellow "${Esc}[33m")
#        set(Blue "${Esc}[34m")
#        set(Magenta "${Esc}[35m")
#        set(Cyan "${Esc}[36m")
#        set(White "${Esc}[37m")
#        set(BoldRed "${Esc}[1;31m")
#        set(BoldGreen "${Esc}[1;32m")
#        set(BoldYellow "${Esc}[1;33m")
#        set(BoldBlue "${Esc}[1;34m")
#        set(BoldMagenta "${Esc}[1;35m")
#        set(BoldCyan "${Esc}[1;36m")
#        set(BoldWhite "${Esc}[1;37m")
#    endif()
#
#    if(DEFINED ${s2c_type})
#        if(ARGN STREQUAL REVERSE)
#            set(${var} ${ColourReset}${${var}}${${s2c_type}} PARENT_SCOPE)
#        else()
#            set(${var} ${${s2c_type}}${${var}}${ColourReset} PARENT_SCOPE)
#        endif()
#    endif()
#endfunction()

macro(print_color NAME)
    printc("        ${NAME}" COLOR ${NAME})
endmacro()

function(text)
    cmake_parse_arguments(PARSE_ARGV 0 "_TEXT" "BOLD" "COLOR" "")
    set(_TEXT_OPTIONS -E cmake_echo_color --no-newline)

    if(_TEXT_COLOR)
        string(TOLOWER "${_TEXT_COLOR}" _TEXT_COLOR_LOWER)
        if(NOT ${_TEXT_COLOR_LOWER} MATCHES "^normal|black|red|green|yellow|blue|magenta|cyan|white")
            message(WARNING " Color ${_TEXT_COLOR} is not support. ")
            message(" Only these colours are supported: ... ")
            print_color(NORMAL)
            print_color(BLACK)
            print_color(RED)
            print_color(GREEN)
            print_color(YELLOW)
            print_color(BLUE)
            print_color(MAGENTA)
            print_color(CYAN)
            print_color(WHITE)
#            set(dummy WARING "Color ${_TEXT_COLOR} is not support.")
        else()
            list(APPEND _TEXT_OPTIONS --${_TEXT_COLOR_LOWER})
        endif()
    endif()

    if(_TEXT_BOLD)
        list(APPEND _TEXT_OPTIONS --bold)
    endif()

    if(${CMAKE_VERSION} LESS 3.15)
        execute_process(COMMAND ${CMAKE_COMMAND} -E env CLICOLOR_FORCE=1 ${CMAKE_COMMAND} ${_TEXT_OPTIONS} ${${_TEXT_UNPARSED_ARGUMENTS}}
            OUTPUT_VARIABLE _TEXT_RESULT
        )
    else ()
        execute_process(COMMAND ${CMAKE_COMMAND} -E env CLICOLOR_FORCE=1 ${CMAKE_COMMAND} ${_TEXT_OPTIONS} ${${_TEXT_UNPARSED_ARGUMENTS}}
            OUTPUT_VARIABLE _TEXT_RESULT
            ECHO_ERROR_VARIABLE
        )
    endif ()

    set(TEXT_RESULT ${_TEXT_RESULT} PARENT_SCOPE)
    set(TEXT_VAR ${_TEXT_UNPARSED_ARGUMENTS} PARENT_SCOPE)
    set(TEXT_FAIL TRUE PARENT_SCOPE)
endfunction()
unset(print_color)

function(printc inText)
    text(${ARGN} inText)
#        message(" >>>> ARGN: ${ARGN}")
#        message(" >>>> TEXT_RESULT: ${TEXT_RESULT}")
#        message(" >>>> TEXT_VAR: ${TEXT_VAR}")
#        message(" >>>> ${TEXT_VAR}: ${${TEXT_VAR}}")
    message("${TEXT_RESULT} ")
endfunction()
function(str2color)
    text(${ARGN})
#    message(" >>>> ARGN: ${ARGN}")
#    message(" >>>> TEXT_RESULT: ${TEXT_RESULT}")
#    message(" >>>> TEXT_VAR: ${TEXT_VAR}")
#    message(" >>>> ${TEXT_VAR}: ${${TEXT_VAR}}")
    set(${TEXT_VAR} ${TEXT_RESULT} PARENT_SCOPE)
    set(str2color_FAIL ${TEXT_FAIL} PARENT_SCOPE)
endfunction()

#printc(COLOR NORMAL TEST_NORMAL)
#printc(BOLD COLOR NORMAL TEST_NORMAL_BOLD)
#printc(COLOR BLACK TEST_BLACK)
#printc(BOLD COLOR BLACK TEST_BLACK_BOLD)
#printc(COLOR RED TEST_RED)
#printc(BOLD COLOR RED TEST_RED_BOLD)
#printc(COLOR GREEN TEST_GREEN)
#printc(BOLD COLOR GREEN TEST_GREEN_BOLD)
#printc(COLOR YELLOW TEST_YELLOW)
#printc(BOLD COLOR YELLOW TEST_YELLOW_BOLD)
#printc(COLOR BLUE TEST_BLUE)
#printc(BOLD COLOR BLUE TEST_BLUE_BOLD)
#printc(COLOR MAGENTA TEST_MAGENTA)
#printc(BOLD COLOR MAGENTA TEST_MAGENTA_BOLD)
#printc(COLOR CYAN TEST_CYAN)
#printc(BOLD COLOR CYAN TEST_CYAN_BOLD)
#printc(COLOR WHITE TEST_WHITE)
#printc(BOLD COLOR WHITE TEST_WHITE_BOLD )

#
# Usage:
# toCamelCase(<variable|list> <out>)
function(toPascalCase  pc_list_in out)
# message("PascalCase:")
    # print(pc_list_in)
    # print(out)
    list(LENGTH pc_list_in num)
    # print(num)
    if(num EQUAL 1)
        if(DEFINED ${pc_list_in})
            set(pc_list_in ${${pc_list_in}})
        endif()
    endif()
    # print(pc_list_in)
    foreach(str ${pc_list_in})
        string(TOLOWER ${str} str)
        string(SUBSTRING ${str} 0 1 FIRST_LETTER)
        string(SUBSTRING ${str} 1 -1 REST)
        string(TOUPPER ${FIRST_LETTER} FIRST_LETTER)
        set(pc_name ${pc_name}${FIRST_LETTER}${REST})
    endforeach()
    set(${out} ${pc_name} PARENT_SCOPE)
endfunction()
#
# Usage:
# toCamelCase(<list> <out>)
function(toCamelCase cc_list_in cc_out)
    # msg(OK "\nCamelCase:")
    # printVar(cc_list_in)
    # print(cc_out)
    # msg(NOTE "ARGV=${ARGV}")
    # msg(NOTE "ARGN=${ARGN}")
    # msg(NOTE "ARGC=${ARGC}")
    list(POP_BACK ARGV cc_out)
    set(cc_list_in ${ARGV})
    # printVar(cc_list_in)
    # print(cc_out)
    list(LENGTH cc_list_in num)
    # print(num)
    if(num EQUAL 1)
        if(DEFINED ${cc_list_in})
            set(cc_list_in ${${cc_list_in}})
        endif()
    endif()
    # first folder stay lowerCase
    # print(cc_list_in)
    list(GET cc_list_in 0 cc_name)
    # remaining folders will be PascalCased
    list(SUBLIST cc_list_in 1 -1 cc_list_in)
    # print(cc_list_in)
    toPascalCase(cc_list_in ouput)
    string(TOLOWER ${cc_name} cc_name)
    set(${cc_out} ${cc_name}${ouput} PARENT_SCOPE)
endfunction()


#
# Usage:
# pathToCamelCase(<list> <out>)
function(pathToCamelCase pathString out)
# message(" ")
    # list(LENGTH pc_list_in num)
    # # print(num)
    # if(num EQUAL 1)
        if(DEFINED ${pathString})
            set(pathString ${${pathString}})
        endif()
    # endif()
    # convert path to list of folders
    file(TO_CMAKE_PATH ${pathString} pathString)
    # printVar(pathString)
    string(REPLACE "/" ";" pathList "${pathString}")
    # printVar(pathList)
    if("${pathList}" MATCHES "^;.*")
        list(POP_FRONT pathList)
    endif()

    list(FILTER pathList EXCLUDE REGEX "\\.\\.")
    # printList(pathList)
    # file(TO_CMAKE_PATH ${pathString} mylist)
    # print(mylist)

    toCamelCase(pathList output)
    set(${out} ${output} PARENT_SCOPE)
endfunction()


# replace home dir by '~'
#
# Usage:
# shortPath(<path|variable> <out> [ALL])
#
# ALL: shortens every folder name to three letters except the last one
#
#      example: /home/<user>/my/nicest/folder
#           ->  ~/my/nic…/folder
#
#      example: /home/<user>/my/nicest/places/to/file.log
#           ->  ~/my/nic…/pla…/to/file.log
function(shortPath path out)
# message(" ")
    cmake_parse_arguments(p "ALL" "" "" ${ARGN})
    # print(path)
    list(LENGTH path num)
    if(num EQUAL 1)
        if(DEFINED ${path})
            set(path ${${path}})
            # print(path)
        endif()
    endif()
    # if starts with windows volume (eg. C:)
    if(path MATCHES "^[a-zA-Z]:")
        # msg(HIGH "windows!")
        file(TO_CMAKE_PATH ${path} path)
        string(REPLACE ";" ":" path "${path}")
        # file(TO_NATIVE_PATH ${path} pathN)
        # print(pathN)
    else()
        file(TO_CMAKE_PATH ${path} path)
    endif()
    # print(path)
    string(REPLACE $ENV{HOME}/ "" _path ${path})
    # print(path)
    # print(_path)
    if(NOT _path STREQUAL path)
        set(prefix ~/)
        msg(NOTE "!")
        # message("################<<<")
    else()
        string(SUBSTRING ${path} 0 1 sub)
        if(sub STREQUAL "/")
            set(prefix "/")
        endif()
    endif()
    # message(".. ${path}")
    if(p_ALL)
        string(REPLACE "/" ";" _path ${_path})
        # print(_path)
        list(POP_BACK _path last)
        # print(last)
        foreach(dir ${_path})
            # print(dir)
            string(LENGTH ${dir} num)
            # print(num)
            if(num GREATER 3)
            string(SUBSTRING ${dir} 0 3 dir)
            list(APPEND newPath ${dir}…)
            else()
            list(APPEND newPath ${dir})
            endif()
            # print(newPath)

        endforeach()
        set(_path "${newPath};${last}")
        # message("> ${_path}")
        string(JOIN "/" _path ${_path})
    endif()
    # message("## ${_path}")
    set(_path "${prefix}${_path}")
    # print(_path)
    set(${out} ${_path} PARENT_SCOPE)
endfunction()