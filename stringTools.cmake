
function(pathToCamelCase pathString out)
    # convert path to list of folders
    string(REPLACE "/" ";" pathList ${pathString})
    if("${pathList}" MATCHES "^;.*")
        list(POP_FRONT pathList)
    endif()
    
    file(TO_CMAKE_PATH ${pathString} mylist)
    
    # first folder stay lowerCase
    list(GET pathList 0 name)
    if(name STREQUAL "common")
        set(isCommonModule TRUE)
    else()
        set(isCommonModule FALSE)
    endif()
    # remaining folders will be PascalCased
    list(SUBLIST pathList 1 -1 pathList)
    foreach(folder ${pathList})
        string(SUBSTRING ${folder} 0 1 FIRST_LETTER)
        string(SUBSTRING ${folder} 1 -1 REST)
        string(TOUPPER ${FIRST_LETTER} FIRST_LETTER)
        set(name ${name}${FIRST_LETTER}${REST})
    endforeach()
    set(${out} ${name} PARENT_SCOPE)
endfunction()

function(shortPath path out)
    set(options ALL)
    set(oneValueArgs NUM GLUE)
    set(multiValueArgs)
    cmake_parse_arguments(p "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
    string(REPLACE $ENV{HOME}/ "" path ${${path}})
    # message(".. ${path}")
    if(p_ALL)
        string(REPLACE "/" ";" path ${path})
        # message("_${path}")
        list(POP_BACK path last)
        # message("_${last}")
        foreach(dir ${path})
            # message("> ${dir}")
            string(SUBSTRING ${dir} 0 3 dir)
            list(APPEND newPath ${dir}â€¦)
            # message("> ${newPath}")
            
        endforeach()
        set(path "${newPath};${last}")
        # message("> ${path}")
        string(JOIN "/" path ${path})
    endif()
    # message("## ${path}")
    set(path "~/${path}")
    print(path)
    set(${out} ${path} PARENT_SCOPE)
endfunction()